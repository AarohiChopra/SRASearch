# -*- coding: utf-8 -*-
"""convert.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YPArBep1NTxOyxAVEYwS7bBwwp7X1gQN

Convert the datasets into vectors
"""

!pip install pandarallel

import pandas as pd
import seaborn as sns
import numpy as np
import sent2vec
from tqdm.auto import tqdm
from pandarallel import pandarallel
from transformers import AutoTokenizer, AutoModel
import torch
pandarallel.initialize(progress_bar=True)

"""aex"""

data_path = "DataPreprocessing/data"
corpus_data = "corpus_data"
corpus_csvs = "corpus_csvs"
save_path = "corpus_embeddings"

def load_model2():
    tokenizer = AutoTokenizer.from_pretrained("microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract")
    model = AutoModel.from_pretrained("microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract")
    return model, tokenizer

def get_embeddings_model(text, model, tokenizer, token_length=64):
    tokens=tokenizer(text,max_length=token_length,padding='max_length',return_tensors='pt', truncation=True)
    output=model(input_ids=tokens.input_ids,
             attention_mask=tokens.attention_mask).last_hidden_state
    return torch.mean(output,axis=1).detach().numpy()

print("Loading new model...")
model, tokenizer = load_model2()

print()

computed_embeddings = {}

print("Loading CSVs")
# used to create a smart progress bar for the loops
# will just show the progress of loading in a bar like format
with tqdm() as bar:
    # Load the dataset
    df = pd.read_csv(f"corpus_data/study_corpus.txt", sep='\t', names=['id', 'text'])
    df['text'] = df['text'].astype(str)
    df['id'] = df['id'].astype(str)
    items = df[["id", "text"]].values
print("Loading csv completed!")

print()

print("Getting embeddings")

"""Get embeddings"""

def get_embeddings(row):
    return get_embeddings_model(text=row['text'], model=model, tokenizer=tokenizer)

with tqdm() as bar:
    # Get Embeddings
    df['vec'] = df.apply(get_embeddings, axis=1)
print("Completed embeddings generation")

k = "study_corpus"
data0 = df['vec'].values
data1 = df['id'].values
np.save(f'corpus_embeddings_new/{k}_embeddings_data.npy', data0)
np.save(f'corpus_embeddings_new/{k}_ids.npy', data1)
print("Saved the embeddings and ids npy.")